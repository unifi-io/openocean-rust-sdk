use crate::{models::gasless::{GaslessQuoteParams, GaslessQuoteResponse, GaslessSwapParams, GaslessSwapResponse, GetOrderStatusParams, GetOrderStatusResponse}, Chain, OpenoceanClient, OpenoceanError};





#[derive(Clone)]
pub struct Gasless<'a>{
    client: &'a OpenoceanClient,
}


// #[async_trait]
impl<'a> Gasless<'a> {
    pub fn new(client: &'a OpenoceanClient) -> Self {
        Self { client }
    }

    pub async fn quote(&self, chain: Chain, params: &GaslessQuoteParams) -> Result<GaslessQuoteResponse, OpenoceanError> {
        let path = format!("/v4/{}/swap", chain);
        self.client.get_json_with_query(&path, params).await
    }

    pub async fn swap(&self, chain: Chain, params: &GaslessSwapParams) -> Result<GaslessSwapResponse, OpenoceanError> {
        let path = format!("/v4/gasless/{}/swap", chain);
        self.client.post(&path, params).await
    }

    pub async fn get_order_status(&self, chain: Chain, params: &GetOrderStatusParams) -> Result<GetOrderStatusResponse, OpenoceanError> {
        let path = format!("/v4/gasless/{}/order", chain);
        self.client.get_json_with_query(&path, params).await
    }
    
}

#[cfg(test)]
mod tests {
    use crate::{models::gasless::GaslessSwapParams, OpenoceanConfig};

    use super::*;

    #[tokio::test]
    async fn test_quote() {
        let client = OpenoceanClient::new(OpenoceanConfig::default()).unwrap();
        let gasless = Gasless::new(&client);
        let res = gasless.quote(Chain::Bsc, &GaslessQuoteParams {
            chain: "bsc".to_string(),
            in_token_address: "0x55d398326f99059ff775485246999027b3197955".to_string(),
            out_token_address: "0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d".to_string(),
            amount_decimals: "5000000000000000000".to_string(),
            gas_price_decimals: "1000000000".to_string(),
            slippage: None,
            referrer: None,
            disabled_dex_ids: None,
        }).await.unwrap();
    }

    #[tokio::test]
    async fn test_swap() {
        let client = OpenoceanClient::new(OpenoceanConfig::default()).unwrap();
        let gasless = Gasless::new(&client);
        let res = gasless.swap(Chain::Arbitrum, &GaslessSwapParams {
            from: "0x72f16Cae8F50Ad615AB5A8e231A496b2ace52532".to_string(),
            to: "0x6352a56caadC4F1E25CD6c75970Fa768A3304e64".to_string(),
            data: "0x90411a32000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a5000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000032eb7902d4134bf98a28b963d26de779af92a212000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a5000000000000000000000000b1dd8e9ebbf5f150b75642d1653df0dacd0bff4700000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000a885300000000000000000000000000000000000000000000000000000000000aa39000000000000000000000000000000000000000000000000000000000000000020000000000000000000000003fe9c9165d3cb5086ce49c9b4a67c01d4e869bfde5b07cdb000000000000000000000000ba1f4c88d563df1f66f726839b0e7e81183ce929000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000470de4df820000000000000000000000000000f851d3d46237ec552a4c6e383a973115e781b1a500000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002e32eb7902d4134bf98a28b963d26de779af92a212000bb882af49447d8a07e3bd95bd0d56f35241523fbab100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002449f86542200000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbabe5b07cdb0000000000000000000000006f38e884725a116c9c7fbf208e79fe8828a2595f00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b1dd8e9ebbf5f150b75642d1653df0dacd0bff4700000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002e82af49447d8a07e3bd95bd0d56f35241523fbab1000064af88d065e77c8cc2239327c5edb3a432268e58310000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".to_string(),
            amount_decimals: "20000000000000000".to_string(),
            fee_amount1: "23660".to_string(),
            fee_amount2: "13916340000000000".to_string(),
            flag: 2,
            gas_price_decimals: 10000000,
            deadline: 1747127367,
            in_token: "0x32eb7902d4134bf98a28b963d26de779af92a212".to_string(),
            out_token: "0xaf88d065e77c8cC2239327C5EDb3A432268e5831".to_string(),
            nonce: 0,
            permit: "0x30f28b7a00000000000000000000000032eb7902d4134bf98a28b963d26de779af92a21200000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000068230c47000000000000000000000000b1dd8e9ebbf5f150b75642d1653df0dacd0bff4700000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000072f16cae8f50ad615ab5a8e231a496b2ace5253200000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000041480ece65964a49824a41690c6052bf0f26e5ea75554dd72be9b83a8b5a42f1e2075aaac15193296c973ff6e6957beeb395f8dc9f97ee5f9ec585e2fe3bbab0971c00000000000000000000000000000000000000000000000000000000000000".to_string(),
            usdvaluation: 0.032,
        }).await.unwrap();

        println!("swap response: {}", serde_json::to_string_pretty(&res).unwrap());
        assert!(res.code == 0);
    }

    #[tokio::test]
    async fn test_get_order_status() {
        let client = OpenoceanClient::new(OpenoceanConfig::default()).unwrap();
        let gasless = Gasless::new(&client);
        let res = gasless.get_order_status(Chain::Arbitrum, &GetOrderStatusParams {
            chain: Chain::Arbitrum,
            order_hash: "0xcd287de3af73d2502755df502e422a5c44e5e4231de54e5243607a29ac2455e4".to_string(),
        }).await.unwrap();
        
        println!("get order status response: {}", serde_json::to_string_pretty(&res).unwrap());
        assert!(res.code == 0);
    }
}